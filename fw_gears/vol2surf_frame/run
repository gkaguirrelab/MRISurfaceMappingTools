#!/anaconda3/bin/python3

import os, json, nilearn
import neuropythy as ny
import nibabel as nb
import numpy as np
import matplotlib.pyplot as plt
import hcp_utils as hcp
from map_fs2gifti import map_fs2gifti
from map_vol2fs import map_vol2fs
from locate_file import locate_file
from nilearn import plotting 

###################### Define the Paths and parameters ###########################

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
freesurfer_subject_dir = '/freesurfer/subjects'
os.system('mkdir %s'%first_output_dir)

#Install bc
os.system('apt-get install bc')

################### Parse config ##############################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

imageName = config['imageName']
registerToCustomSurface = config['registerToCustomSurface']
saveCiftifyStructure = config['saveCiftifyStructure']
inputIsAlreadyInMNI152 = config['inputIsAlreadyInMNI152']
outputDiagnosticForAllTasks = config['outputDiagnosticForAllTasks']

################### Set path to input ##############################

inputImageOrArchive_path = os.path.join(flywheel_base, 'input/inputImageOrArchive/')
registrationTemplate_path = os.path.join(flywheel_base, 'input/registrationTemplate/')
zippedReconAll_path = os.path.join(flywheel_base, 'input/zippedReconAll/')

## Get the input image ##
inputImageOrArchive = os.path.join(inputImageOrArchive_path, os.listdir(inputImageOrArchive_path)[0])
inputImage = []
# Single image case
if os.path.splitext(inputImageOrArchive)[1] == '.gz' or os.path.splitext(inputImageOrArchive)[1] == 'nii':
    inputImage.append(inputImageOrArchive)
# Input is archive
elif os.path.splitext(inputImageOrArchive)[1] == 'zip':
    unzipped_file_path = os.path.join('/opt', 'unzipped_files')
    os.system('unzip -q %s -d %s' % (inputImageOrArchive, unzipped_file_path))
    if imageName == 'all':
        for image in os.listdir(unzipped_file_path):
            inputImage.append(os.path.join(unzipped_file_path, image))         
    else:
        inputImage = locate_file(imageName, unzipped_file_path)
else:
    raise RuntimeError('Image input is not a zip or nifti. Type unrecognized.')

## Get the registration template if one exists ##
if os.path.exists(registrationTemplate_path):
    if os.listdir(registrationTemplate_path)[0][-3:] == '.gz' or 'nii':
        inputTemplate = os.path.join(registrationTemplate_path, os.listdir(registrationTemplate_path)[0])
    else:
        raise RuntimeError('registration template is not nifti')
else:
    inputTemplate = 'NA'    

## Get the recon-all.
if os.path.exists(zippedReconAll_path):
    zippedReconAll = os.path.join(zippedReconAll_path, os.listdir(zippedReconAll_path)[0])
    unzipped_recon_all = os.path.join(zippedReconAll_path, 'unzipped_recon_all')
    os.system('unzip -q %s -d %s'%(zippedReconAll, unzipped_recon_all))
    subject_name = os.listdir(unzipped_recon_all)[0]
    os.system('mv %s/* %s/%s' % (unzipped_recon_all, freesurfer_subject_dir, subject_name))
    unzipped_recon_all = os.path.join(freesurfer_subject_dir, subject_name)
elif not os.path.exists(zippedReconAll_path) and registerToCustomSurface:
    raise RuntimeError('You need a recon all input for custom surface mappings')
else:
    unzipped_recon_all = os.path.join(freesurfer_subject_dir, 'fsaverage')
    
standard_mesh_path = '/standard_mesh_atlases'
standard_meshes = '/tmp/standard_mesh_atlases'
os.system('unzip -q %s -d /tmp' % standard_mesh_path)

################### Run Algorithm ################################
for i in inputImage:
    
    # Get the image name for ciftify folder name 
    name_without_path = os.path.split(i)[1]
    task_name = os.path.splitext(name_without_path)[0]
    if task_name[-3:] == 'nii':
        task_name = 'task_' + task_name[:-4]
       
    # Create the folder structure 
    main_task_folder = os.path.join(first_output_dir, task_name)
    freesurfer_surface_folder = os.path.join(first_output_dir, main_task_folder, 'freesurfer164k')
    gifti_surface_folder = os.path.join(first_output_dir, main_task_folder, 'giftiFSLR_32k')
    cifti_surface_folder = os.path.join(first_output_dir, main_task_folder, 'cifti')
    cifti_surface_atlas = os.path.join(cifti_surface_folder, 'FSLR_32k')
    cifti_surface_native = os.path.join(cifti_surface_folder, 'native')
    os.system('mkdir %s %s %s %s %s %s' % (main_task_folder, freesurfer_surface_folder, 
                                           gifti_surface_folder, cifti_surface_folder, 
                                           cifti_surface_atlas, cifti_surface_native))
          
    # Get the image type
    image = nb.load(i)
    image_type = str(type(image))[16:21]
    
    if image_type == 'nifti': 
        left_intgifti, right_intgifti, left_mgz, right_mgz = map_vol2fs(i, 
                                                                        inputTemplate, 
                                                                        freesurfer_surface_folder, 
                                                                        freesurfer_subject_dir,
                                                                        recon_all_folder = unzipped_recon_all,
                                                                        input_is_MNI=inputIsAlreadyInMNI152, 
                                                                        custom_recon_all=registerToCustomSurface)  
        if not registerToCustomSurface:
            final_gifti_left, final_gifti_right = map_fs2gifti(left_intgifti, right_intgifti, 
                                                                standard_meshes, gifti_surface_folder, 
                                                                resolution='32k')
            # Create a ciftify directory and call ciftify
            ciftify_work_dir = '/hcp_dir/'
            os.system('mkdir %s' % ciftify_work_dir)
            ciftify_recon_run = 'export PATH="/freesurfer/bin:$PATH";export PATH="/anaconda3/bin:$PATH";FSLDIR=/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;ciftify_recon_all --ciftify-work-dir %s --fs-subjects-dir %s --surf-reg FS --fs-license /freesurfer/license.txt --n_cpus 2 --verbose %s' % (ciftify_work_dir, freesurfer_subject_dir, subject_name)
            os.system(ciftify_recon_run)
            ciftify_dtseries_run = 'export PATH="/freesurfer/bin:$PATH";export PATH="/anaconda3/bin:$PATH";FSLDIR=/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;ciftify_subject_fmri --already-in-MNI --surf-reg FS --ciftify-work-dir %s %s %s %s -v' % (ciftify_work_dir, i, subject_name, task_name)
            os.system(ciftify_dtseries_run)
            os.system('cp %s %s/' % (os.path.join(ciftify_work_dir, subject_name, 'MNINonLinear', 'Results', task_name, '%s_Atlas_s0.dtseries.nii' % task_name), cifti_surface_atlas))
            ciftify_visualization_command = 'export PATH="/freesurfer/bin:$PATH";export PATH="/anaconda3/bin:$PATH";FSLDIR=/fsl;. ${FSLDIR}/etc/fslconf/fsl.sh;PATH=${FSLDIR}/bin:${PATH};export FSLDIR PATH;cifti_vis_fmri subject --ciftify-work-dir %s %s %s' % (ciftify_work_dir, task_name, subject_name)
            os.system(ciftify_visualization_command)
            
            # Interpolate to native 
            # sub = ny.hcp_subject(os.path.join(ciftify_work_dir, subject_name), default_alignment='FS')
            # hem_from_left = sub.hemis['lh_LR32k']
            # hem_from_right = sub.hemis['rh_LR32k']
            # hem_to_left = sub.hemis['lh']
            # hem_to_right = sub.hemis['rh']
            
            os.system('cd %s; zip -r -q %s *' % (main_task_folder, os.path.join(final_output_dir, '%s_surfaces.zip' % task_name)))
########################### Plot new maps ####################################
    #### This is still in the loop and registerToCustomSurface condition ####
            # Empty folder for images
            images_main = os.path.join(task_name, '/tmp/images_folder')
            os.system('mkdir %s' % images_main)
            images = os.path.join(images_main, 'images')
            os.system('mkdir %s' % images)
            
            # Make task specific diagnostic folders 
            task_diagnostics = os.path.join(images, task_name)
            os.system('mkdir %s' % task_diagnostics)
                
            # Load the giftis and plot
            giftifig1 = plt.figure(figsize=[11,6])
            giftifig2 = plt.figure(figsize=[11,6])
            giftifig3 = plt.figure(figsize=[11,6])
            giftifig4 = plt.figure(figsize=[11,6])
            
            gifti_left = nb.load(final_gifti_left)
            gifti_right = nb.load(final_gifti_right)
            gifti_left_data = gifti_left.darrays[0].data
            gifti_right_data = gifti_right.darrays[0].data
            
            plotting.plot_surf_stat_map(hcp.mesh.inflated_left, gifti_left_data, 
                                        view='medial', bg_map=hcp.mesh.sulc_left, 
                                        title='gifti left', figure=giftifig1,
                                        output_file=os.path.join(images, task_diagnostics, 'med_gifti_left.png'))
            plotting.plot_surf_stat_map(hcp.mesh.inflated_left, gifti_left_data, 
                                        view='lateral', bg_map=hcp.mesh.sulc_left, 
                                        title='gifti left', figure=giftifig2,
                                        output_file=os.path.join(images, task_diagnostics, 'lat_gifti_left.png'))
            plotting.plot_surf_stat_map(hcp.mesh.inflated_right, gifti_right_data, 
                                        view='medial', bg_map=hcp.mesh.sulc_right, 
                                        title='gifti right', figure=giftifig3,
                                        output_file=os.path.join(images, task_diagnostics, 'med_gifti_right.png'))
            plotting.plot_surf_stat_map(hcp.mesh.inflated_right, gifti_right_data, 
                                        view='lateral', bg_map=hcp.mesh.sulc_right, 
                                        title='gifti right', figure=giftifig4,
                                        output_file=os.path.join(images, task_diagnostics, 'lat_gifti_right.png'))
            
            # Plot fs images 
            giftifig5 = plt.figure(figsize=[11,6])
            giftifig6 = plt.figure(figsize=[11,6])
            giftifig7 = plt.figure(figsize=[11,6])
            giftifig8 = plt.figure(figsize=[11,6])
            
            left_map = nilearn.surface.load_surf_data(left_mgz)
            right_map = nilearn.surface.load_surf_data(right_mgz)
            if len(left_map.shape) != 1:
                left_map = left_map[:,0]
                right_map = right_map[:,0]
            left_inflated = nilearn.surface.load_surf_mesh(os.path.join(unzipped_recon_all, 'surf', 'lh.inflated'))
            right_inflated = nilearn.surface.load_surf_mesh(os.path.join(unzipped_recon_all, 'surf', 'rh.inflated'))
            left_sulc = os.path.join(unzipped_recon_all, 'surf', 'lh.sulc')
            right_sulc = os.path.join(unzipped_recon_all, 'surf', 'rh.sulc')
            
            plotting.plot_surf_stat_map(left_inflated, left_map, 
                                        view='medial', bg_map=left_sulc, 
                                        title='FS left', figure=giftifig5,
                                        output_file=os.path.join(images, task_diagnostics, 'med_FS_left.png'))
            plotting.plot_surf_stat_map(left_inflated, left_map, 
                                        view='lateral', bg_map=left_sulc, 
                                        title='FS left', figure=giftifig6,
                                        output_file=os.path.join(images, task_diagnostics, 'lat_FS_left.png'))
            plotting.plot_surf_stat_map(right_inflated, right_map, 
                                        view='medial', bg_map=right_sulc, 
                                        title='FS right', figure=giftifig7,
                                        output_file=os.path.join(images, task_diagnostics, 'med_FS_right.png'))
            plotting.plot_surf_stat_map(right_inflated, right_map, 
                                        view='lateral', bg_map=right_sulc, 
                                        title='FS right', figure=giftifig8,
                                        output_file=os.path.join(images, task_diagnostics, 'lat_FS_right.png'))
        
            os.system('mv %s/* %s/' % (os.path.join(ciftify_work_dir, 'qc_fmri', '%s_%s' % (subject_name, task_name)), os.path.join(images, task_diagnostics)))

            # Make html
            html_file = open('%s/index.html' % images_main,'w')
            html_content = '''
            <h1>Fsaverage surface</h1>
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_lateral">
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_lateral">   
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_medial">
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_medial">
            <p style="clear: both;">
            <h1>Gifti FSLR surface</h1>
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_lateral">
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_lateral">   
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_medial">
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_medial">
            <p style="clear: both;">   
            <h1>ciftify - Pial Surface Overlayed on Mean Functional Image</h1>
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="pialonfunc">
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="pialonfunc">
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="pialonfunc">
            <p style="clear: both;">   
            <h1>ciftify - Intensity of the resampled subcortical fMRI data (1st TR), Unsmoothed</h1>
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="intensity Subcort">
            <p style="clear: both;">   
            <h1>ciftify - Intensity of the Projected fMRI data (1st TR), Unsmoothed</h1>
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="fmri">
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="fmri">
            <p style="clear: both;">   
            <h1>ciftify - Correlation with partietal seed (Dorsal Attention Network) - Smoothed with 4mm FWHM</h1>
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="partietal corr">
            <p style="clear: both;">    
            <h1>ciftify - Correlation with precuneus seed (Default Mode Network) - Smoothed with 4mm FWHM - Smoothed with 4mm FWHM</h1>
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="precuneus corr">
            <p style="clear: both;">   
            <h1>ciftify - Correlation with insula seed (Salience Network) - Smoothed with 4mm FWHM</h1>
            <img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="insula corr">
            <p style="clear: both;">   
            ''' % ('images/med_gifti_left.png', 'images/med_gifti_right.png', 'images/lat_gifti_left.png', 'images/lat_gifti_left.png',
                    'images/med_FS_left.png', 'images/med_FS_right.png', 'images/lat_FS_left.png', 'images/lat_FS_right.png', 
                    'images/PialRegCor.png', 'images/PialRegAx.png', 'images/PialRegSag.png', 'images/fmri_Subcortical.png',
                    'images/fmri_LM.png', 'images/fmri_DV.png', 'images/DAN_conn.png', 'images/DMN_conn.png', 'images/SAL_conn.png')
                
            html_file.write(html_content)
            html_file.close() 
            if outputDiagnosticForAllTasks:
                os.system('cd %s; zip -r -q %s *' % (images_main, os.path.join(final_output_dir, '%s_diagnostics.zip' % task_name)))
    else:
        raise RuntimeError('The image you have is not a nifti image. Currently, only volumetric to surface mapping is supported')
    
################## Zip the surfaces and output ##################################
if not outputDiagnosticForAllTasks:
    os.system('cd %s; zip -r -q %s *' % (images_main, os.path.join(final_output_dir, '%s_diagnostics.zip' % task_name)))

