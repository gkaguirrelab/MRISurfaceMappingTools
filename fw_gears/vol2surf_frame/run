#!/root/anaconda3/bin/python3

import os, json, nilearn
import nibabel as nb
import numpy as np
import matplotlib.pyplot as plt
import hcp_utils as hcp
from map_fs2gifti import map_fs2gifti
from map_gifti2cifti import map_gifti2cifti
from map_vol2fs import map_vol2fs
from locate_file import locate_file
from nilearn import plotting 

###################### Define the Paths and parameters ###########################

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
os.system('mkdir %s'%first_output_dir)

################### Parse config ##############################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

imageName = config['imageName']
imageType = config['imageType']
inputIsInMNI152 = config['inputIsInMNI152']
TR = config['TR']

################### Set path to input ##############################
inputImage_path = os.path.join(flywheel_base, 'input/inputImage/')
inputTemplate_path = os.path.join(flywheel_base, 'input/inputTemplate_path/')
zippedReconAll_path = os.path.join(flywheel_base, 'input/zippedReconAll/')
zippedHCPStructure_path = os.path.join(flywheel_base, 'input/zippedHCPStructure/')
freesurfer_subject_dir = '/freesurfer/subjects' 

inputImage = os.path.join(inputImage_path, os.listdir(inputImage_path)[0])
if os.path.splitext(inputImage)[1] == 'zip':
    unzipped_file_path = os.path.join('/opt', 'unzipped_files')
    os.system('unzip -q %s -d %s'%(inputImage, unzipped_file_path))
    inputImage = locate_file(imageName, unzipped_file_path)

if os.path.exists(inputTemplate_path):
    inputTemplate = os.path.join(inputTemplate_path, os.listdir(inputTemplate_path)[0])
else:
    inputTemplate = 'NA'
    
if os.path.exists(zippedReconAll_path):
    zippedReconAll = os.path.join(zippedReconAll_path, os.listdir(zippedReconAll_path)[0])
    unzipped_recon_all = os.path.join(freesurfer_subject_dir, 'unzipped_recon_all')
    os.system('unzip -q %s -d %s'%(zippedReconAll, unzipped_recon_all))
else:
    unzipped_recon_all = '/freesurfer/subjects/fsaverage'

if os.path.exists(zippedHCPStructure_path):
    zippedHCPStructure = os.path.join(zippedHCPStructure_path, os.listdir(zippedHCPStructure_path)[0]) # Not implemented
    unzipped_hcp = os.path.join('/opt', 'unzipped_recon_all')
    os.system('unzip -q %s -d %s'%(zippedHCPStructure, unzipped_hcp))
else:
    zippedHCPStructure = 'NA'
  
standard_mesh_path = '/standard_mesh_atlases'
standard_meshes = '/tmp/standard_mesh_atlases'
dtseries_atlas = '/tmp/dtseries_atlas_FSLR32k'
os.system('unzip -q %s -d /tmp; mv %s %s' % (standard_mesh_path, dtseries_atlas,
                                             standard_meshes))

################### Run Algorithm ################################

# Get the image type
image = nb.load(inputImage)
image_type = str(type(image))[16:21]

if image_type == 'nifti':
   
    if unzipped_recon_all == '/freesurfer/subjects/fsaverage':   
        left_intgifti, right_intgifti, left_mgz, right_mgz = map_vol2fs(inputImage, 
                                                                        inputTemplate, 
                                                                        first_output_dir, 
                                                                        freesurfer_subject_dir,
                                                                        from_mni_to_fsaverage=inputIsInMNI152, 
                                                                        recon_all_folder=unzipped_recon_all)
       
        final_gifti_left, final_gifti_right = map_fs2gifti(left_intgifti, right_intgifti, 
                                                           standard_meshes, first_output_dir, 
                                                           resolution='32k')
              
        final_dtseries = map_gifti2cifti(final_gifti_left, final_gifti_left, 
                                         standard_meshes, TR, first_output_dir)

    
    else:
        left_intgifti, right_intgifti, left_mgz, right_mgz = map_vol2fs(inputImage, 
                                                                        inputTemplate, 
                                                                        first_output_dir, 
                                                                        freesurfer_subject_dir,
                                                                        from_mni_to_fsaverage=False, 
                                                                        recon_all_folder=unzipped_recon_all)    
    
   
else:
    raise RuntimeError('The image you have is not a nifti image. Currently, only volumetric to surface mapping is supported')

########################### Plot new maps #####################################

# Empty folder for images
images_main = '/tmp/images_folder'
os.system('mkdir %s' % images_main)
images = os.path.join(images_main, 'images')
os.system('mkdir %s' % images)

# Load the giftis and plot
giftifig1 = plt.figure(figsize=[11,6])
giftifig2 = plt.figure(figsize=[11,6])
giftifig3 = plt.figure(figsize=[11,6])
giftifig4 = plt.figure(figsize=[11,6])

gifti_left = nb.load(final_gifti_left)
gifti_right = nb.load(final_gifti_right)
gifti_left_data = gifti_left.darrays[0].data
gifti_right_data = gifti_right.darrays[0].data

plotting.plot_surf_stat_map(hcp.mesh.inflated_left, gifti_left_data, 
                            view='medial', bg_map=hcp.mesh.sulc_left, 
                            title='gifti left', figure=giftifig1,
                            output_file=os.path.join(images, 'med_gifti_left.png'))
plotting.plot_surf_stat_map(hcp.mesh.inflated_left, gifti_left_data, 
                            view='lateral', bg_map=hcp.mesh.sulc_left, 
                            title='gifti left', figure=giftifig2,
                            output_file=os.path.join(images, 'lat_gifti_left.png'))
plotting.plot_surf_stat_map(hcp.mesh.inflated_right, gifti_right_data, 
                            view='medial', bg_map=hcp.mesh.sulc_right, 
                            title='gifti right', figure=giftifig3,
                            output_file=os.path.join(images, 'med_gifti_right.png'))
plotting.plot_surf_stat_map(hcp.mesh.inflated_right, gifti_right_data, 
                            view='lateral', bg_map=hcp.mesh.sulc_right, 
                            title='gifti right', figure=giftifig4,
                            output_file=os.path.join(images, 'lat_gifti_right.png'))

# Plot fs images 
giftifig5 = plt.figure(figsize=[11,6])
giftifig6 = plt.figure(figsize=[11,6])
giftifig7 = plt.figure(figsize=[11,6])
giftifig8 = plt.figure(figsize=[11,6])

left_map = nilearn.surface.load_surf_data(left_mgz)
right_map = nilearn.surface.load_surf_data(right_mgz)
if len(left_map.shape) != 1:
    left_map = left_map[:,0]
    right_map = right_map[:,0]
left_inflated = nilearn.surface.load_surf_mesh(os.path.join(unzipped_recon_all, 'surf', 'lh.inflated'))
right_inflated = nilearn.surface.load_surf_mesh(os.path.join(unzipped_recon_all, 'surf', 'rh.inflated'))
left_sulc = os.path.join(unzipped_recon_all, 'surf', 'lh.sulc')
right_sulc = os.path.join(unzipped_recon_all, 'surf', 'rh.sulc')

plotting.plot_surf_stat_map(left_inflated, left_map, 
                            view='medial', bg_map=left_sulc, 
                            title='FS left', figure=giftifig5,
                            output_file=os.path.join(images, 'med_FS_left.png'))
plotting.plot_surf_stat_map(left_inflated, left_map, 
                            view='lateral', bg_map=left_sulc, 
                            title='FS left', figure=giftifig6,
                            output_file=os.path.join(images, 'lat_FS_left.png'))
plotting.plot_surf_stat_map(right_inflated, right_map, 
                            view='medial', bg_map=right_sulc, 
                            title='FS right', figure=giftifig7,
                            output_file=os.path.join(images, 'med_FS_right.png'))
plotting.plot_surf_stat_map(right_inflated, right_map, 
                            view='lateral', bg_map=right_sulc, 
                            title='FS right', figure=giftifig8,
                            output_file=os.path.join(images, 'lat_FS_right.png'))

# Make html
html_file = open('%s/index.html' % images_main,'w')
html_content = '''
<h1>Surface</h1>
<img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_lateral">
<img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_lateral">   
<img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_medial">
<img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_medial">
<p style="clear: both;">
<h1>Gifti</h1>
<img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_lateral">
<img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_lateral">   
<img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_medial">
<img src="./%s" style="float: left; width: 30%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Right_medial">
<p style="clear: both;">   
''' % ('images/med_gifti_left.png', 'images/med_gifti_right.png', 'images/lat_gifti_left.png', 'images/lat_gifti_left.png',
       'images/med_FS_left.png', 'images/med_FS_right.png', 'images/lat_FS_left.png', 'images/lat_FS_right.png')
    
html_file.write(html_content)
html_file.close() 

################## Zip everything and output ##################################
os.system('cd %s; zip -r -q %s *' % (images_main, os.path.join(final_output_dir, 'results.zip')))
os.system('cd %s; zip -r -q %s *' % (first_output_dir, os.path.join(final_output_dir, 'surface.zip')))
